#############################################################################
#   Print Start & End Macros
#############################################################################

[gcode_macro PRINT_START]   

gcode:
    Frame_Light_ON
    Part_Light_ON
    G92 E0 
    G90                       ; Use absolute coordinates
    BED_MESH_CLEAR    
  
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set BED_HEAT_SOAK_MINUTES = params.BED_HEAT_SOAK_MINUTES|default(0)|float %}
    {% set BED_MESH = params.BED_MESH|default('adaptive')|string %} ; One of: adaptive (default), full, default (or any other value as the bed mesh profile name), none
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}


    SET_BED_TEMPERATURE TARGET={BED_TEMP}                           ; Heat Bed to target temp
    BED_TEMPERATURE_WAIT MINIMUM={BED_TEMP-2} MAXIMUM={BED_TEMP+4}  ; Waits until the bed reaches close to target
    {% if BED_HEAT_SOAK_MINUTES > 0 %}
    RESPOND MSG="Waiting {BED_HEAT_SOAK_MINUTES} minutes for the bed to settle."
    G4 P{BED_HEAT_SOAK_MINUTES * 60000}
    {% endif %}

    CG28
    
    {% if BED_MESH == 'full' %}
    BED_MESH_CALIBRATE
    {% elif BED_MESH == 'adaptive' %}
    BED_MESH_CALIBRATE ADAPTIVE=1
    {% elif BED_MESH != 'none' %}
    BED_MESH_PROFILE LOAD={BED_MESH}
    {% endif %}
    Smart_Park
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}   ; Set and heat the final extruder temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP-4} MAXIMUM={EXTRUDER_TEMP+10}  ; Wait for extruder to reach near target temperature
    LINE_PURGE                                                      ; KAMP Line Purge near print
    G92 E0                                                          ; Reset Extruder
    G1 Z2.0 F3000                                                   ; Move Z Axis up 
    M117 Printing           
       
[gcode_macro PRINT_END]
gcode:
    Frame_Light_OFF
    Part_Light_OFF
    M400                    ; wait for buffer to clear
    TURN_OFF_HEATERS
    G92 E0                  ; zero the extruder
    G91                     ; Relative positioning
    G1 E-2 F2700            ; Retract a bit
    G1 X5 Y5 F3000          ; Wipe out
    G1 E-2 Z0.2 F1600       ; Retract and raise Z
    G1 Z4 F3000             ; Raise Z more
    G90                     ; Absolute positioning
    G1 X0 Y415            ; Present print
    M107                    ; turn off fan
    M84                     ; turn off steppers
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    M117
    END_TUNE                ; Print End Beeper Jingle

#############################################################################
#   Pause, Resume & Cancel Macros
#############################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  PAUSE_TUNE
  {% set z = params.Z|default(30)|int %}
  {% if printer['pause_resume'].is_paused|int == 0 %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target|default(220)}
      # Store current extruder temperature before cooling
      SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=prev_temp VALUE={printer['extruder'].target|default(220)}
      SET_GCODE_VARIABLE MACRO=UNLOAD_FILAMENT VARIABLE=prev_temp VALUE={printer['extruder'].target|default(220)}
      # Store Z-hop value for RESUME
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
      SAVE_GCODE_STATE NAME=PAUSE
      BASE_PAUSE
      G91
      {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
          G1 E-2 F2700
          G1 X3 Y3 F3000
          G1 E-2 Z{z} F1600
          SAVE_GCODE_STATE NAME=ZLIFT
      {% else %}
          { action_respond_info("Pause zhop exceeds maximum Z height.") }
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
          G1 E-2 F2700
          G1 X3 Y3 F3000
          G1 E-2 F1600
          SAVE_GCODE_STATE NAME=ZLIFT
      {% endif %}
      G90
      G1 X{printer.toolhead.axis_minimum.x+5} Y{printer.toolhead.axis_maximum.y-5} F6000
      SAVE_GCODE_STATE NAME=PAUSEPARK
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=175
      SET_IDLE_TIMEOUT TIMEOUT=43200
  {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  {% if printer['pause_resume'].is_paused|int == 1 %}
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                           ; enable filament sensor
      SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}   ; set timeout back to configured value
      {% if etemp > 0 %}
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={etemp|int}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={etemp|int - 4} MAXIMUM={etemp|int + 10}  ; wait for hotend to heat back up to print temp
      {% endif %}
      RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                      ; go back to park position in case toolhead was moved during pause                                                                        ; enable extruder stepper motor
      G91                                                                           ; relative positioning
      M83                                                                           ; set extruder to relative mode
      G1 E80  F200                                                                  ; extrude 80mm of filament to prime the nozzle
      G4 P2000                                                                      ; wait for 2 seconds to stabilise pressure
      G1 X20 F15000                                                                 ; wiggle movement to ensure free movement of purge
      G1 X-20
      G1 X20
      G1 X-20
      G1 X20
      G1 X-20
      RESTORE_GCODE_STATE NAME=ZLIFT MOVE=1 MOVE_SPEED=60                           ; restore to the zlift position above the print
      G1 X-3 Y-3 F3000                                                              ; Undo the pause Wipe out 
      G1 Z{zhop * -1} F900  
      RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                           ; restore to the paused position (lowers to final print location)
      M400                                                                          ; wait for all moves to complete
      BASE_RESUME                                                                   ; resume print
  {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT

#############################################################################
#   Filament Sensor & Change Macros
#############################################################################

[filament_switch_sensor filament_sensor]
pause_on_runout: True
insert_gcode:
    M117 Insert Detected
runout_gcode:
    M117 Runout Detected
    UNLOAD_FILAMENT
event_delay: 3.0
pause_delay: 1.0
switch_pin: PA12

[delayed_gcode DISABLE_FILAMENT_SENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro M600]
description: Pause for colour change
gcode:
  PAUSE
  UNLOAD_FILAMENT

[gcode_macro LOAD_FILAMENT]
variable_prev_temp: 220
variable_load_distance:  25
variable_purge_distance:  30
gcode:
  {% set target_temp = prev_temp|int if prev_temp >= 200 else 220 %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_temp - 4} MAXIMUM={target_temp + 40}
  {% set speed = params.SPEED|default(300) %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 30 %}
  SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E{load_distance} F{max_velocity}
  G1 E{purge_distance} F{speed}
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_prev_temp: 220
variable_unload_distance:  55
variable_purge_distance:  15
gcode:
  {% set target_temp = prev_temp|int if prev_temp >= 200 else 220 %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_temp - 4} MAXIMUM={target_temp + 40}
  {% set speed = params.SPEED|default(300) %}
  {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity * 30 %}
  SAVE_GCODE_STATE NAME=unload_state
  G91
  G92 E0
  G1 E{purge_distance} F{speed}
  G1 E-{unload_distance} F{max_velocity}
  RESTORE_GCODE_STATE NAME=unload_state  

[gcode_macro SET_BED_TEMPERATURE]
gcode:
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.TARGET}

[gcode_macro BED_TEMPERATURE_WAIT]
gcode:
    {% if params.MINIMUM is defined and params.MAXIMUM is defined %}
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.MINIMUM} MAXIMUM={params.MAXIMUM}
    {% elif params.MINIMUM is defined %}
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.MINIMUM}
    {% elif params.MAXIMUM is defined %}
      TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={params.MAXIMUM}
    {% else %}
      RESPOND TYPE=error MSG="Error on 'BED_TEMPERATURE_WAIT': missing MINIMUM or MAXIMUM."
    {% endif %}  


[gcode_macro CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
  {% else %}
  {% endif %}    


[gcode_macro CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
  {% else %}
  {% endif %}  

[delayed_gcode start_fan_at_idle_speed]
initial_duration: 5.                                ; 5s wait after boot
gcode:
  # Gcode Hack to trigger the mainboard fan from printer boot
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=1 ; bed heat to 1degC
  G4 P2000                                          ; wait 2s
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0 ; bed heat off  

#############################################################################
#   PID Tuning Macros
#############################################################################

[gcode_macro PID_Tune_EXTRUDER]
gcode:
  {% set temperature = params.TEMPERATURE|default(210) %}
  CG28
  M106 S255
  PID_CALIBRATE HEATER=extruder TARGET={temperature}
  SAVE_CONFIG

[gcode_macro PID_Tune_BED]
gcode:
  {% set temperature = params.TEMPERATURE|default(60) %}
  CG28
  M106 S255 ;Sets Print Fans to 100%
  PID_CALIBRATE HEATER=heater_bed TARGET={temperature}
  SAVE_CONFIG  